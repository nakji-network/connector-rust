// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `chain.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  to convert addresses from bytes to hex address, https://github.com/ethereum/go-ethereum/blob/4b2ff1457ac28fb2894485194e0e344e84c2bcd7/common/types.go#L210
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nakji.evm.chain.Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.From)
    pub From: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Hash)
    pub Hash: ::std::string::String,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Size)
    pub Size: f64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.AccountNonce)
    pub AccountNonce: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Price)
    pub Price: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.GasLimit)
    pub GasLimit: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Recipient)
    pub Recipient: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Amount)
    pub Amount: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.Payload)
    pub Payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.V)
    pub V: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.R)
    pub R: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Transaction.S)
    pub S: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nakji.evm.chain.Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Transaction| { &m.ts },
            |m: &mut Transaction| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "From",
            |m: &Transaction| { &m.From },
            |m: &mut Transaction| { &mut m.From },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Hash",
            |m: &Transaction| { &m.Hash },
            |m: &mut Transaction| { &mut m.Hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Size",
            |m: &Transaction| { &m.Size },
            |m: &mut Transaction| { &mut m.Size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "AccountNonce",
            |m: &Transaction| { &m.AccountNonce },
            |m: &mut Transaction| { &mut m.AccountNonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Price",
            |m: &Transaction| { &m.Price },
            |m: &mut Transaction| { &mut m.Price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GasLimit",
            |m: &Transaction| { &m.GasLimit },
            |m: &mut Transaction| { &mut m.GasLimit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Recipient",
            |m: &Transaction| { &m.Recipient },
            |m: &mut Transaction| { &mut m.Recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Amount",
            |m: &Transaction| { &m.Amount },
            |m: &mut Transaction| { &mut m.Amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Payload",
            |m: &Transaction| { &m.Payload },
            |m: &mut Transaction| { &mut m.Payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "V",
            |m: &Transaction| { &m.V },
            |m: &mut Transaction| { &mut m.V },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "R",
            |m: &Transaction| { &m.R },
            |m: &mut Transaction| { &mut m.R },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "S",
            |m: &Transaction| { &m.S },
            |m: &mut Transaction| { &mut m.S },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.From = is.read_bytes()?;
                },
                26 => {
                    self.Hash = is.read_string()?;
                },
                33 => {
                    self.Size = is.read_double()?;
                },
                40 => {
                    self.AccountNonce = is.read_uint64()?;
                },
                48 => {
                    self.Price = is.read_uint64()?;
                },
                56 => {
                    self.GasLimit = is.read_uint64()?;
                },
                66 => {
                    self.Recipient = is.read_bytes()?;
                },
                72 => {
                    self.Amount = is.read_uint64()?;
                },
                82 => {
                    self.Payload = is.read_bytes()?;
                },
                88 => {
                    self.V = is.read_uint64()?;
                },
                96 => {
                    self.R = is.read_uint64()?;
                },
                104 => {
                    self.S = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.From.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.From);
        }
        if !self.Hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Hash);
        }
        if self.Size != 0. {
            my_size += 1 + 8;
        }
        if self.AccountNonce != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.AccountNonce);
        }
        if self.Price != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.Price);
        }
        if self.GasLimit != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.GasLimit);
        }
        if !self.Recipient.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.Recipient);
        }
        if self.Amount != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.Amount);
        }
        if !self.Payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.Payload);
        }
        if self.V != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.V);
        }
        if self.R != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.R);
        }
        if self.S != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.S);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.From.is_empty() {
            os.write_bytes(2, &self.From)?;
        }
        if !self.Hash.is_empty() {
            os.write_string(3, &self.Hash)?;
        }
        if self.Size != 0. {
            os.write_double(4, self.Size)?;
        }
        if self.AccountNonce != 0 {
            os.write_uint64(5, self.AccountNonce)?;
        }
        if self.Price != 0 {
            os.write_uint64(6, self.Price)?;
        }
        if self.GasLimit != 0 {
            os.write_uint64(7, self.GasLimit)?;
        }
        if !self.Recipient.is_empty() {
            os.write_bytes(8, &self.Recipient)?;
        }
        if self.Amount != 0 {
            os.write_uint64(9, self.Amount)?;
        }
        if !self.Payload.is_empty() {
            os.write_bytes(10, &self.Payload)?;
        }
        if self.V != 0 {
            os.write_uint64(11, self.V)?;
        }
        if self.R != 0 {
            os.write_uint64(12, self.R)?;
        }
        if self.S != 0 {
            os.write_uint64(13, self.S)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.From.clear();
        self.Hash.clear();
        self.Size = 0.;
        self.AccountNonce = 0;
        self.Price = 0;
        self.GasLimit = 0;
        self.Recipient.clear();
        self.Amount = 0;
        self.Payload.clear();
        self.V = 0;
        self.R = 0;
        self.S = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            ts: ::protobuf::MessageField::none(),
            From: ::std::vec::Vec::new(),
            Hash: ::std::string::String::new(),
            Size: 0.,
            AccountNonce: 0,
            Price: 0,
            GasLimit: 0,
            Recipient: ::std::vec::Vec::new(),
            Amount: 0,
            Payload: ::std::vec::Vec::new(),
            V: 0,
            R: 0,
            S: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nakji.evm.chain.Block)
pub struct Block {
    // message fields
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.Hash)
    pub Hash: ::std::string::String,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.Difficulty)
    pub Difficulty: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.Number)
    pub Number: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.GasLimit)
    pub GasLimit: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.GasUsed)
    pub GasUsed: u64,
    // @@protoc_insertion_point(field:nakji.evm.chain.Block.Nonce)
    pub Nonce: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nakji.evm.chain.Block.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Block| { &m.ts },
            |m: &mut Block| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Hash",
            |m: &Block| { &m.Hash },
            |m: &mut Block| { &mut m.Hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Difficulty",
            |m: &Block| { &m.Difficulty },
            |m: &mut Block| { &mut m.Difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Number",
            |m: &Block| { &m.Number },
            |m: &mut Block| { &mut m.Number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GasLimit",
            |m: &Block| { &m.GasLimit },
            |m: &mut Block| { &mut m.GasLimit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "GasUsed",
            |m: &Block| { &m.GasUsed },
            |m: &mut Block| { &mut m.GasUsed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Nonce",
            |m: &Block| { &m.Nonce },
            |m: &mut Block| { &mut m.Nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Block>(
            "Block",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Block {
    const NAME: &'static str = "Block";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.Hash = is.read_string()?;
                },
                24 => {
                    self.Difficulty = is.read_uint64()?;
                },
                32 => {
                    self.Number = is.read_uint64()?;
                },
                40 => {
                    self.GasLimit = is.read_uint64()?;
                },
                48 => {
                    self.GasUsed = is.read_uint64()?;
                },
                56 => {
                    self.Nonce = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.Hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Hash);
        }
        if self.Difficulty != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.Difficulty);
        }
        if self.Number != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.Number);
        }
        if self.GasLimit != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.GasLimit);
        }
        if self.GasUsed != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.GasUsed);
        }
        if self.Nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.Nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.Hash.is_empty() {
            os.write_string(2, &self.Hash)?;
        }
        if self.Difficulty != 0 {
            os.write_uint64(3, self.Difficulty)?;
        }
        if self.Number != 0 {
            os.write_uint64(4, self.Number)?;
        }
        if self.GasLimit != 0 {
            os.write_uint64(5, self.GasLimit)?;
        }
        if self.GasUsed != 0 {
            os.write_uint64(6, self.GasUsed)?;
        }
        if self.Nonce != 0 {
            os.write_uint64(7, self.Nonce)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Block {
        Block::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.Hash.clear();
        self.Difficulty = 0;
        self.Number = 0;
        self.GasLimit = 0;
        self.GasUsed = 0;
        self.Nonce = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Block {
        static instance: Block = Block {
            ts: ::protobuf::MessageField::none(),
            Hash: ::std::string::String::new(),
            Difficulty: 0,
            Number: 0,
            GasLimit: 0,
            GasUsed: 0,
            Nonce: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Block {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Block").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bchain.proto\x12\x0fnakji.evm.chain\x1a\x1fgoogle/protobuf/timestam\
    p.proto\"\xc5\x02\n\x0bTransaction\x12*\n\x02ts\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x02ts\x12\x12\n\x04From\x18\x02\x20\x01(\
    \x0cR\x04From\x12\x12\n\x04Hash\x18\x03\x20\x01(\tR\x04Hash\x12\x12\n\
    \x04Size\x18\x04\x20\x01(\x01R\x04Size\x12\"\n\x0cAccountNonce\x18\x05\
    \x20\x01(\x04R\x0cAccountNonce\x12\x14\n\x05Price\x18\x06\x20\x01(\x04R\
    \x05Price\x12\x1a\n\x08GasLimit\x18\x07\x20\x01(\x04R\x08GasLimit\x12\
    \x1c\n\tRecipient\x18\x08\x20\x01(\x0cR\tRecipient\x12\x16\n\x06Amount\
    \x18\t\x20\x01(\x04R\x06Amount\x12\x18\n\x07Payload\x18\n\x20\x01(\x0cR\
    \x07Payload\x12\x0c\n\x01V\x18\x0b\x20\x01(\x04R\x01V\x12\x0c\n\x01R\x18\
    \x0c\x20\x01(\x04R\x01R\x12\x0c\n\x01S\x18\r\x20\x01(\x04R\x01S\"\xcb\
    \x01\n\x05Block\x12*\n\x02ts\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\x02ts\x12\x12\n\x04Hash\x18\x02\x20\x01(\tR\x04Hash\x12\x1e\n\
    \nDifficulty\x18\x03\x20\x01(\x04R\nDifficulty\x12\x16\n\x06Number\x18\
    \x04\x20\x01(\x04R\x06Number\x12\x1a\n\x08GasLimit\x18\x05\x20\x01(\x04R\
    \x08GasLimit\x12\x18\n\x07GasUsed\x18\x06\x20\x01(\x04R\x07GasUsed\x12\
    \x14\n\x05Nonce\x18\x07\x20\x01(\x04R\x05NonceJ\xda\x0b\n\x06\x12\x04\0\
    \0\x1d\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x01\0\
    )\n\x08\n\x01\x02\x12\x03\x02\0\x18\n\xa9\x01\n\x02\x04\0\x12\x04\x05\0\
    \x13\x01\x1a\x9c\x01\x20to\x20convert\x20addresses\x20from\x20bytes\x20t\
    o\x20hex\x20address,\x20https://github.com/ethereum/go-ethereum/blob/4b2\
    ff1457ac28fb2894485194e0e344e84c2bcd7/common/types.go#L210\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x05\x08\x13\n\x14\n\x04\x04\0\x02\0\x12\x03\x06\x02#\
    \"\x07uint64\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x06\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x06\x1c\x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x06!\"\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x02\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x07\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\x08\x02\x12\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\t\r\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x08\x10\x11\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\t\x02\x12\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\t\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\t\t\r\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\t\x10\x11\n\x15\n\x04\x04\0\x02\x04\x12\x03\n\x02\x1a\"\x08\x20uint\
    64\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\n\t\x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\n\x18\
    \x19\n\x16\n\x04\x04\0\x02\x05\x12\x03\x0b\x02\x13\"\t\x20big.int\n\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x0b\t\x0e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0b\x11\
    \x12\n\x15\n\x04\x04\0\x02\x06\x12\x03\x0c\x02\x16\"\x08\x20uint64\n\n\
    \x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03\x0c\t\x11\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0c\x14\
    \x15\n\x0b\n\x04\x04\0\x02\x07\x12\x03\r\x02\x17\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\r\t\x12\
    \n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\r\x15\x16\n\x16\n\x04\x04\0\x02\
    \x08\x12\x03\x0e\x02\x14\"\t\x20big.int\n\n\x0c\n\x05\x04\0\x02\x08\x05\
    \x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0e\t\x0f\n\
    \x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0e\x12\x13\n\x0b\n\x04\x04\0\x02\t\
    \x12\x03\x0f\x02\x16\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x0f\x02\x07\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03\x0f\t\x10\n\x0c\n\x05\x04\0\x02\t\x03\
    \x12\x03\x0f\x13\x15\n\x16\n\x04\x04\0\x02\n\x12\x03\x10\x02\x10\"\t\x20\
    big.int\n\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\
    \x04\0\x02\n\x01\x12\x03\x10\t\n\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x10\
    \r\x0f\n\x16\n\x04\x04\0\x02\x0b\x12\x03\x11\x02\x10\"\t\x20big.int\n\n\
    \x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x0b\x01\x12\x03\x11\t\n\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x11\r\x0f\
    \n\x16\n\x04\x04\0\x02\x0c\x12\x03\x12\x02\x10\"\t\x20big.int\n\n\x0c\n\
    \x05\x04\0\x02\x0c\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\x0c\x01\
    \x12\x03\x12\t\n\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x12\r\x0f\n\n\n\
    \x02\x04\x01\x12\x04\x15\0\x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\
    \r\n\x14\n\x04\x04\x01\x02\0\x12\x03\x16\x02#\"\x07uint64\n\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x16\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x16\x1c\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16!\"\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x17\x02\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x17\t\r\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x17\x10\x11\n\x14\n\x04\x04\x01\
    \x02\x02\x12\x03\x18\x02\x18\"\x07bigint\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x18\t\
    \x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x18\x16\x17\n\x14\n\x04\x04\
    \x01\x02\x03\x12\x03\x19\x02\x14\"\x07bigint\n\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x19\
    \t\x0f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x19\x12\x13\n\x15\n\x04\
    \x04\x01\x02\x04\x12\x03\x1a\x02\x16\"\x08\x20uint64\n\n\x0c\n\x05\x04\
    \x01\x02\x04\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03\x1a\t\x11\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1a\x14\x15\n\x15\
    \n\x04\x04\x01\x02\x05\x12\x03\x1b\x02\x15\"\x08\x20uint64\n\n\x0c\n\x05\
    \x04\x01\x02\x05\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\
    \x12\x03\x1b\t\x10\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x1b\x13\x14\n\
    \x1f\n\x04\x04\x01\x02\x06\x12\x03\x1c\x02\x13\"\x12[8]byte\x20.Uint64()\
    \n\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x06\x01\x12\x03\x1c\t\x0e\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\
    \x03\x1c\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Transaction::generated_message_descriptor_data());
            messages.push(Block::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
