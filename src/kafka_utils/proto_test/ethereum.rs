// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ethereum.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  for test only
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ethereum.Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:ethereum.Transaction.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:ethereum.Transaction.from)
    pub from: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ethereum.Transaction.hash)
    pub hash: ::std::string::String,
    // @@protoc_insertion_point(field:ethereum.Transaction.size)
    pub size: f64,
    // @@protoc_insertion_point(field:ethereum.Transaction.account_nonce)
    pub account_nonce: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.price)
    pub price: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.gas_limit)
    pub gas_limit: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.recipient)
    pub recipient: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ethereum.Transaction.amount)
    pub amount: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.payload)
    pub payload: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:ethereum.Transaction.v)
    pub v: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.r)
    pub r: u64,
    // @@protoc_insertion_point(field:ethereum.Transaction.s)
    pub s: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ethereum.Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Transaction| { &m.ts },
            |m: &mut Transaction| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from",
            |m: &Transaction| { &m.from },
            |m: &mut Transaction| { &mut m.from },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Transaction| { &m.hash },
            |m: &mut Transaction| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &Transaction| { &m.size },
            |m: &mut Transaction| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "account_nonce",
            |m: &Transaction| { &m.account_nonce },
            |m: &mut Transaction| { &mut m.account_nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &Transaction| { &m.price },
            |m: &mut Transaction| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_limit",
            |m: &Transaction| { &m.gas_limit },
            |m: &mut Transaction| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recipient",
            |m: &Transaction| { &m.recipient },
            |m: &mut Transaction| { &mut m.recipient },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &Transaction| { &m.amount },
            |m: &mut Transaction| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &Transaction| { &m.payload },
            |m: &mut Transaction| { &mut m.payload },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "v",
            |m: &Transaction| { &m.v },
            |m: &mut Transaction| { &mut m.v },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "r",
            |m: &Transaction| { &m.r },
            |m: &mut Transaction| { &mut m.r },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "s",
            |m: &Transaction| { &m.s },
            |m: &mut Transaction| { &mut m.s },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.from = is.read_bytes()?;
                },
                26 => {
                    self.hash = is.read_string()?;
                },
                33 => {
                    self.size = is.read_double()?;
                },
                40 => {
                    self.account_nonce = is.read_uint64()?;
                },
                48 => {
                    self.price = is.read_uint64()?;
                },
                56 => {
                    self.gas_limit = is.read_uint64()?;
                },
                66 => {
                    self.recipient = is.read_bytes()?;
                },
                72 => {
                    self.amount = is.read_uint64()?;
                },
                82 => {
                    self.payload = is.read_bytes()?;
                },
                88 => {
                    self.v = is.read_uint64()?;
                },
                96 => {
                    self.r = is.read_uint64()?;
                },
                104 => {
                    self.s = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.from);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hash);
        }
        if self.size != 0. {
            my_size += 1 + 8;
        }
        if self.account_nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.account_nonce);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.price);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.gas_limit);
        }
        if !self.recipient.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.recipient);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.amount);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.payload);
        }
        if self.v != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.v);
        }
        if self.r != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.r);
        }
        if self.s != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.s);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.from.is_empty() {
            os.write_bytes(2, &self.from)?;
        }
        if !self.hash.is_empty() {
            os.write_string(3, &self.hash)?;
        }
        if self.size != 0. {
            os.write_double(4, self.size)?;
        }
        if self.account_nonce != 0 {
            os.write_uint64(5, self.account_nonce)?;
        }
        if self.price != 0 {
            os.write_uint64(6, self.price)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(7, self.gas_limit)?;
        }
        if !self.recipient.is_empty() {
            os.write_bytes(8, &self.recipient)?;
        }
        if self.amount != 0 {
            os.write_uint64(9, self.amount)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(10, &self.payload)?;
        }
        if self.v != 0 {
            os.write_uint64(11, self.v)?;
        }
        if self.r != 0 {
            os.write_uint64(12, self.r)?;
        }
        if self.s != 0 {
            os.write_uint64(13, self.s)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.from.clear();
        self.hash.clear();
        self.size = 0.;
        self.account_nonce = 0;
        self.price = 0;
        self.gas_limit = 0;
        self.recipient.clear();
        self.amount = 0;
        self.payload.clear();
        self.v = 0;
        self.r = 0;
        self.s = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            ts: ::protobuf::MessageField::none(),
            from: ::std::vec::Vec::new(),
            hash: ::std::string::String::new(),
            size: 0.,
            account_nonce: 0,
            price: 0,
            gas_limit: 0,
            recipient: ::std::vec::Vec::new(),
            amount: 0,
            payload: ::std::vec::Vec::new(),
            v: 0,
            r: 0,
            s: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ethereum.Block)
pub struct Block {
    // message fields
    // @@protoc_insertion_point(field:ethereum.Block.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:ethereum.Block.hash)
    pub hash: ::std::string::String,
    // @@protoc_insertion_point(field:ethereum.Block.difficulty)
    pub difficulty: u64,
    // @@protoc_insertion_point(field:ethereum.Block.number)
    pub number: u64,
    // @@protoc_insertion_point(field:ethereum.Block.gas_limit)
    pub gas_limit: u64,
    // @@protoc_insertion_point(field:ethereum.Block.gas_used)
    pub gas_used: u64,
    // @@protoc_insertion_point(field:ethereum.Block.nonce)
    pub nonce: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ethereum.Block.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &Block| { &m.ts },
            |m: &mut Block| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Block| { &m.hash },
            |m: &mut Block| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "difficulty",
            |m: &Block| { &m.difficulty },
            |m: &mut Block| { &mut m.difficulty },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &Block| { &m.number },
            |m: &mut Block| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_limit",
            |m: &Block| { &m.gas_limit },
            |m: &mut Block| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_used",
            |m: &Block| { &m.gas_used },
            |m: &mut Block| { &mut m.gas_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Block| { &m.nonce },
            |m: &mut Block| { &mut m.nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Block>(
            "Block",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Block {
    const NAME: &'static str = "Block";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.hash = is.read_string()?;
                },
                24 => {
                    self.difficulty = is.read_uint64()?;
                },
                32 => {
                    self.number = is.read_uint64()?;
                },
                40 => {
                    self.gas_limit = is.read_uint64()?;
                },
                48 => {
                    self.gas_used = is.read_uint64()?;
                },
                56 => {
                    self.nonce = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hash);
        }
        if self.difficulty != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.difficulty);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.number);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.gas_limit);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.gas_used);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.hash.is_empty() {
            os.write_string(2, &self.hash)?;
        }
        if self.difficulty != 0 {
            os.write_uint64(3, self.difficulty)?;
        }
        if self.number != 0 {
            os.write_uint64(4, self.number)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(5, self.gas_limit)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(6, self.gas_used)?;
        }
        if self.nonce != 0 {
            os.write_uint64(7, self.nonce)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Block {
        Block::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.hash.clear();
        self.difficulty = 0;
        self.number = 0;
        self.gas_limit = 0;
        self.gas_used = 0;
        self.nonce = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Block {
        static instance: Block = Block {
            ts: ::protobuf::MessageField::none(),
            hash: ::std::string::String::new(),
            difficulty: 0,
            number: 0,
            gas_limit: 0,
            gas_used: 0,
            nonce: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Block {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Block").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eethereum.proto\x12\x08ethereum\x1a\x1fgoogle/protobuf/timestamp.pr\
    oto\"\xc7\x02\n\x0bTransaction\x12*\n\x02ts\x18\x01\x20\x01(\x0b2\x1a.go\
    ogle.protobuf.TimestampR\x02ts\x12\x12\n\x04from\x18\x02\x20\x01(\x0cR\
    \x04from\x12\x12\n\x04hash\x18\x03\x20\x01(\tR\x04hash\x12\x12\n\x04size\
    \x18\x04\x20\x01(\x01R\x04size\x12#\n\raccount_nonce\x18\x05\x20\x01(\
    \x04R\x0caccountNonce\x12\x14\n\x05price\x18\x06\x20\x01(\x04R\x05price\
    \x12\x1b\n\tgas_limit\x18\x07\x20\x01(\x04R\x08gasLimit\x12\x1c\n\trecip\
    ient\x18\x08\x20\x01(\x0cR\trecipient\x12\x16\n\x06amount\x18\t\x20\x01(\
    \x04R\x06amount\x12\x18\n\x07payload\x18\n\x20\x01(\x0cR\x07payload\x12\
    \x0c\n\x01v\x18\x0b\x20\x01(\x04R\x01v\x12\x0c\n\x01r\x18\x0c\x20\x01(\
    \x04R\x01r\x12\x0c\n\x01s\x18\r\x20\x01(\x04R\x01s\"\xcd\x01\n\x05Block\
    \x12*\n\x02ts\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02ts\
    \x12\x12\n\x04hash\x18\x02\x20\x01(\tR\x04hash\x12\x1e\n\ndifficulty\x18\
    \x03\x20\x01(\x04R\ndifficulty\x12\x16\n\x06number\x18\x04\x20\x01(\x04R\
    \x06number\x12\x1b\n\tgas_limit\x18\x05\x20\x01(\x04R\x08gasLimit\x12\
    \x19\n\x08gas_used\x18\x06\x20\x01(\x04R\x07gasUsed\x12\x14\n\x05nonce\
    \x18\x07\x20\x01(\x04R\x05nonceJ\xcb\n\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0)\n\x08\n\x01\x02\
    \x12\x03\x04\0\x11\n\x1b\n\x02\x04\0\x12\x04\x07\0\x15\x01\x1a\x0f\x20fo\
    r\x20test\x20only\n\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x13\n\x14\n\x04\
    \x04\0\x02\0\x12\x03\x08\x02#\"\x07uint64\n\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x08\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x1c\x1e\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08!\"\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\t\x02%\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\t\x1c\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\t#$\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02%\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\x1c\
    \x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n#$\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\x0b\x02%\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x1c\x20\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0b#$\n\x15\n\x04\x04\0\x02\x04\x12\x03\x0c\x02.\"\x08\
    \x20uint64\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03\x0c\x1c)\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x0c,-\n\x16\n\x04\x04\0\x02\x05\x12\x03\r\x02&\"\t\x20big.int\n\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\r\x1c!\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\r$%\n\x15\
    \n\x04\x04\0\x02\x06\x12\x03\x0e\x02*\"\x08\x20uint64\n\n\x0c\n\x05\x04\
    \0\x02\x06\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\
    \x0e\x1c%\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0e()\n\x0b\n\x04\x04\0\
    \x02\x07\x12\x03\x0f\x02*\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0f\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0f\x1c%\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x03\x0f()\n\x16\n\x04\x04\0\x02\x08\x12\x03\x10\x02'\"\
    \t\x20big.int\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x10\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x08\x01\x12\x03\x10\x1c\"\n\x0c\n\x05\x04\0\x02\x08\x03\
    \x12\x03\x10%&\n\x0b\n\x04\x04\0\x02\t\x12\x03\x11\x02)\n\x0c\n\x05\x04\
    \0\x02\t\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x11\
    \x1c#\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x11&(\n\x16\n\x04\x04\0\x02\n\
    \x12\x03\x12\x02#\"\t\x20big.int\n\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\
    \x12\x02\x08\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x12\x1c\x1d\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x03\x12\x20\"\n\x16\n\x04\x04\0\x02\x0b\x12\x03\x13\
    \x02#\"\t\x20big.int\n\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x13\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x13\x1c\x1d\n\x0c\n\x05\x04\0\x02\
    \x0b\x03\x12\x03\x13\x20\"\n\x16\n\x04\x04\0\x02\x0c\x12\x03\x14\x02#\"\
    \t\x20big.int\n\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x14\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x0c\x01\x12\x03\x14\x1c\x1d\n\x0c\n\x05\x04\0\x02\x0c\
    \x03\x12\x03\x14\x20\"\n\n\n\x02\x04\x01\x12\x04\x17\0\x1f\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x17\x08\r\n\x14\n\x04\x04\x01\x02\0\x12\x03\x18\x02\
    #\"\x07uint64\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x02\x1b\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x18\x1c\x1e\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x18!\"\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x19\x02%\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x19\x1c\x20\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x19#$\n\
    \x14\n\x04\x04\x01\x02\x02\x12\x03\x1a\x02+\"\x07bigint\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x1a\x1c&\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1a)*\n\x14\n\
    \x04\x04\x01\x02\x03\x12\x03\x1b\x02'\"\x07bigint\n\n\x0c\n\x05\x04\x01\
    \x02\x03\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\
    \x1b\x1c\"\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1b%&\n\x15\n\x04\x04\
    \x01\x02\x04\x12\x03\x1c\x02*\"\x08\x20uint64\n\n\x0c\n\x05\x04\x01\x02\
    \x04\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x1c\
    \x1c%\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1c()\n\x15\n\x04\x04\x01\
    \x02\x05\x12\x03\x1d\x02)\"\x08\x20uint64\n\n\x0c\n\x05\x04\x01\x02\x05\
    \x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x1d\x1c\
    $\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x1d'(\n\x1f\n\x04\x04\x01\x02\
    \x06\x12\x03\x1e\x02&\"\x12[8]byte\x20.Uint64()\n\n\x0c\n\x05\x04\x01\
    \x02\x06\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\
    \x1e\x1c!\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x1e$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Transaction::generated_message_descriptor_data());
            messages.push(Block::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
